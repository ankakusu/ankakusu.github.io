#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile %r{^/blog/post} do
  unless item.binary?
    filter :erb
    filter :kramdown if item[:extension] == "md"
    filter :colorize_syntax, :default_colorizer => :pygmentsrb
    layout "post"
  end
end


compile 'fonts/*/' do
  # don’t filter or layout
end


compile %r{^/(scripts|css|lib|data|partials)} do
  unless item.binary?
    filter :erb
  end
  # don’t filter or layout
end

compile '*' do
  unless item.binary?
    filter :erb
    layout 'default'
  end
end

route %r{^/blog/post} do
  y,m,d,t = /([0-9]{4})([0-9]{2})([0-9]{2})-([^\/]+)/
    .match(item.identifier).captures
  if item.binary?
    dir,bin = /([^#]+)+#(.+)/.match("#{t}.#{item[:extension]}").captures
    "/blog/post/#{y}/#{m}/#{d}/#{dir}/#{bin}"
  else
    "/blog/post/#{y}/#{m}/#{d}/#{t}/index.html"
  end
end

route 'fonts/*/' do
  # /fonts/foo-eot/ -> /fonts/foo.eot
  "/fonts/fontawesome-webfont." +item[:extension]
  
end

route %r{^/(scripts|css|lib|img|data|partials)} do
  item.identifier.chop + "." + item[:extension]
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
